# -*- coding: utf-8 -*-
"""Extração de dados.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1htKemLqWZOrRSkW1hULB5opVpQH4LLRU
"""

#@title Baixando a planilha
!gdown --id 1jGACLDvsHYvjhFFEbMDg3jtjftCL2jmA

#@title Código
import pandas as pd
import numpy as np

#@title Declarando a planilha
# read the csv file
results = pd.read_csv('/content/Pasta1.csv',sep=';' , encoding='latin-1')

#@title Código
com_trombocitopenia = results[results['Trombocitopenia'].str.contains('sim', case = False,na=False)]
com_agredados_plaquetarios = results[results['Agregados Plaquetarios'].str.contains('sim',na=False, case = False)]
com_ambos = results[(results['Trombocitopenia'].str.contains('sim',na=False, case = False)) & (results['Agregados Plaquetarios'].str.contains('sim',na=False, case = False))]
com_nenhuma = results[(results['Trombocitopenia'].str.contains('nao',na=False, case = False)) & (results['Agregados Plaquetarios'].str.contains('nao',na=False, case = False))]
sem_nada = results[results['Outras alterações'].str.contains('NaN',na=True, case = False)& (results['Trombocitopenia'].str.contains('nao',na=False, case = False))& (results['Agregados Plaquetarios'].str.contains('nao',na=False, case = False))]
com_nenhuma_filtrada = pd.merge(com_nenhuma,sem_nada, indicator=True, how='outer').query('_merge=="left_only"').drop('_merge', axis=1)
outras_alteracoes = results.dropna(axis = 0,how = 'any')
tipos_de_alteracoes = list(outras_alteracoes['Outras alterações'].unique())

#@title Código
idades = []
for i in range(1,12):
  if i == 1: 
    a = f'{i} mes'
  else:
    a = f'{i} meses'
  idades.append(a)
for i in range(1,20):
  if i == 1: 
    a = f'{i} ano'
  else:
    a = f'{i} anos'
  idades.append(a)

#@title Código
# for i in range(0,len(idades)):
#   b = a.count(idades[i])
#   if b != 0:
#     print(f'animais com {idades[i]}: {a.count(idades[i])}')

#@title Código
# a = list(com_trombocitopenia['Idade '])
# com_trombocitopenia.reset_index(inplace=True,drop = True)

#@title Código
setando_tipos_de_alteracoes_unicas = set(tipos_de_alteracoes)
tipos_de_alteracoes_unicas = list(setando_tipos_de_alteracoes_unicas)

#@title Animais com Trombocitopenia
print(f'Total de animais com trombocitopenia: {len(com_trombocitopenia)}, desse total:')
print(f'{len(com_trombocitopenia)-len(com_ambos)} possuem apenas trombocitopenia;')
print(f'{len(com_trombocitopenia[com_trombocitopenia["Sexo"].str.contains("m", case = False)])} são machos e {len(com_trombocitopenia[com_trombocitopenia["Sexo"].str.contains("f", case = False)])} são fêmeas :')
a = list(com_trombocitopenia['Idade '])
a= [x.strip(' ') for x in a]
a=[x.lower() for x in a]
for i in range(0,len(idades)):
  b = a.count(idades[i])
  if b != 0:
    print(f'animais com {idades[i]}: {a.count(idades[i])}')
alt = list(com_trombocitopenia['Outras alterações'])
for i in range(0,len(tipos_de_alteracoes_unicas)):
  b = alt.count(tipos_de_alteracoes_unicas[i])
  if b != 0:
    print(f'animais com {tipos_de_alteracoes_unicas[i]}: {alt.count(tipos_de_alteracoes_unicas[i])}')

#@title Código
# # Permanently changes the pandas settings
# pd.set_option('display.max_rows', None)
# pd.set_option('display.max_columns', None)
# pd.set_option('display.width', None)
# pd.set_option('display.max_colwidth', -1)
 
# # All dataframes hereafter reflect these changes.
# display(com_agredados_plaquetarios)
 
# print('**RESET_OPTIONS**')
 
# # Resets the options
# pd.reset_option('all')
# display(com_agredados_plaquetarios)

# ##trombocitounicos = list(com_trombocitopenia['Outras alterações'].unique())

#@title Agregados Planetarios
print(f'Total de animais com Agregados Plaquetarios: {len(com_agredados_plaquetarios)}, desse total:')
print(f'{len(com_agredados_plaquetarios)-len(com_ambos)} possuem apenas agregados plaquetarios;')
print(f'{len(com_agredados_plaquetarios[com_agredados_plaquetarios["Sexo"].str.contains("m", case = False)])} são machos e {len(com_agredados_plaquetarios[com_agredados_plaquetarios["Sexo"].str.contains("f", case = False)])} são fêmeas :')
idade_agreg = list(com_agredados_plaquetarios['Idade '])
idade_agreg= [x.strip(' ') for x in idade_agreg]
idade_agreg=[x.lower() for x in idade_agreg]
if idade_agreg.count('n. i.') > 0:
  print(f'O numero de animais com idades inválidas é igual a: {idade_agreg.count("n. i.")}')
for i in range(0,len(idades)):
  b = idade_agreg.count(idades[i])
  if b != 0:
    print(f'animais com {idades[i]}: {idade_agreg.count(idades[i])}')

# for i in range(0,len(tipos_de_alteracoes)):
#   a =com_agredados_plaquetarios['Outras alterações'].str.contains(tipos_de_alteracoes[i],case = False).sum()
#   if a !=0 :
#     print(f'N° de animais com trombocitopenia e {tipos_de_alteracoes[i]}: {a}')
alt = list(com_agredados_plaquetarios['Outras alterações'])
for i in range(0,len(tipos_de_alteracoes_unicas)):
  b = alt.count(tipos_de_alteracoes_unicas[i])
  if b != 0:
    print(f'animais com {tipos_de_alteracoes_unicas[i]}: {alt.count(tipos_de_alteracoes_unicas[i])}')

#@title Animais com trombocitopenia e agregados planetarios(ambos)
print(f'Total de animais com trombocitopenia e agregados plaquetarios: {len(com_ambos)}, desse total:')
print(f'{len(com_ambos[com_ambos["Sexo"].str.contains("m", case = False)])} são machos e {len(com_ambos[com_ambos["Sexo"].str.contains("f", case = False)])} são fêmeas :')
# for i in range(0,len(idades)):
#   a =com_ambos['Idade '].str.contains(idades[i],case = False).sum()
#   if a != 0:
#     print(f'Nº de animais com {idades[i]} e trombocitopenia e agregados plaquetarios: {a} animais')
idade_agreg = list(com_ambos['Idade '])
idade_agreg= [x.strip(' ') for x in idade_agreg]
idade_agreg=[x.lower() for x in idade_agreg]
if idade_agreg.count('n. i.') > 0:
  print(f'O numero de animais com idades inválidas é igual a: {idade_agreg.count("n. i.")}')
for i in range(0,len(idades)):
  b = idade_agreg.count(idades[i])
  if b != 0:
    print(f'animais com {idades[i]}: {idade_agreg.count(idades[i])}')

alt = list(com_ambos['Outras alterações'])
for i in range(0,len(tipos_de_alteracoes_unicas)):
  b = alt.count(tipos_de_alteracoes_unicas[i])
  if b != 0:
    print(f'animais com {tipos_de_alteracoes_unicas[i]}: {alt.count(tipos_de_alteracoes_unicas[i])}')

#@title Animais sem trombocitopenia e sem agregados
print(f'Total de animais sem trombocitopenia e sem agregados: {len(com_nenhuma)}, desse total:')
print(f'{len(sem_nada)} não possui nenhum dos dois sintomas, e nenhuma outra alteração;')
print(f'Dos que não possuem alterações, {len(sem_nada[sem_nada["Sexo"].str.contains("m", case = False)])} são machos e {len(sem_nada[sem_nada["Sexo"].str.contains("f", case = False)])} são fêmeas;')
print(f'Dos que possuem alterações, {len(com_nenhuma_filtrada[com_nenhuma_filtrada["Sexo"].str.contains("m", case = False)])} são machos e {len(com_nenhuma_filtrada[com_nenhuma_filtrada["Sexo"].str.contains("f", case = False)])} são fêmeas;')
idade_agreg = list(com_nenhuma['Idade '])
idade_agreg= [x.strip(' ') for x in idade_agreg]
idade_agreg=[x.lower() for x in idade_agreg]
if idade_agreg.count('n. i.') > 0:
  print(f'O numero de animais com idades inválidas é igual a: {idade_agreg.count("n. i.")}')
for i in range(0,len(idades)):
  b = idade_agreg.count(idades[i])
  if b != 0:
    print(f'animais com {idades[i]}: {idade_agreg.count(idades[i])}')